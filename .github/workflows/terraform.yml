name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  TF_VAR_sa_key_b64: ${{ secrets.TERRAFORM_SA_KEY_BASE64 }}
  
jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Установка Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.8.4"

      # Шаг 3: Установка Yandex Cloud CLI
      - name: Install Yandex Cloud CLI
        run: |
          # Установка Yandex Cloud CLI
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh  | bash
          export PATH="$HOME/yandex-cloud/bin:$PATH"

          # Проверка установки: вывод версии CLI
          echo "Checking yc version..."
          yc --version || (echo "yc is not installed correctly" && exit 1)

          # Опционально: проверка наличия новой версии CLI
          echo "Checking for yc updates..."
          if yc version | grep -q "new yc version"; then
             echo "A new version of yc is available. Updating..."
             yc components update
          else
             echo "yc is up to date."
          fi

          # Проверка подключения к Yandex Cloud
          echo "Testing yc connection..."
          yc config list || (echo "Failed to connect to Yandex Cloud. Check your configuration." && exit 1)

      # Шаг 4: Настройка переменных окружения (если необходимо)
      - name: Configure Environment Variables
        run: |
          echo "TF_VAR_cloud_id=${{ secrets.YC_CLOUD_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_folder_id=${{ secrets.YC_FOLDER_ID }}" >> $GITHUB_ENV
# echo "TF_VAR_service_account_key_file=key.json" >> $GITHUB_ENV

      # Шаг 5: Terraform Init и Apply для terr-setup
      - name: Terraform Init (terr-setup)
        working-directory: terr-setup
        run: terraform init

      - name: Terraform Apply (terr-setup)
        working-directory: terr-setup
        id: terr-setup
        run: |
          terraform apply -auto-approve

      # Шаг 6: Получение выходных переменных из terr-setup
      - name: Extract Access Key and Secret Key
        id: extract-keys
        working-directory: terr-setup
        run: |
          export TF_LOG=
          ACCESS_KEY=$(terraform output -raw access_key | tr -d '\n\r')
          SECRET_KEY=$(terraform output -raw secret_key | tr -d '\n\r')
          echo "ACCESS_KEY=$ACCESS_KEY" >> $GITHUB_ENV
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV

      # Шаг 7: Настройка Yandex Cloud CLI
      - name: Configure Yandex Cloud CLI
        run: |
          yc config set service-account-key '{"id": "${{ env.ACCESS_KEY }}", "service_account_id": "<SERVICE_ACCOUNT_ID>", "private_key": "${{ env.SECRET_KEY }}"}'
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      # Шаг 8: Настройка переменных окружения для terr-infra
      - name: Configure Environment Variables for terr-infra
        run: |
          echo "TF_VAR_cloud_id=${{ secrets.YC_CLOUD_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_folder_id=${{ secrets.YC_FOLDER_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_service_account_key_json='{\"id\": \"${{ env.ACCESS_KEY }}\", \"service_account_id\": \"<SERVICE_ACCOUNT_ID>\", \"private_key\": \"${{ env.SECRET_KEY }}\"}'" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ env.SECRET_KEY }}" >> $GITHUB_ENV

      # Шаг 9: Terraform Init и Apply для terr-infra
      - name: Terraform Init (terr-infra)
        working-directory: terr-infra
        run: terraform init

      - name: Terraform Apply (terr-infra)
        working-directory: terr-infra
        run: terraform apply -auto-approve

      # Шаг 10: Извлечение kubeconfig
      - name: Extract Kubeconfig
        id: extract-kubeconfig
        working-directory: terr-infra
        run: |
          echo "KUBECONFIG=$(terraform output -raw kubeconfig)" >> $GITHUB_ENV

      # Шаг 11: Запись kubeconfig в ~/.kube/config
      - name: Save Kubeconfig to Local File
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG" > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "Kubeconfig saved to ~/.kube/config"

      # Шаг 12: Проверка kubectl (опционально)
      - name: Test kubectl Connection
        run: |
          kubectl get nodes
